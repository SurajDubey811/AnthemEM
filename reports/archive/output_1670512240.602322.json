{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 3, "total_error": 0}, "tests": {"0": {"status": "FAIL", "message": "FAILURE: \u001b[31mcheck bool(False): Not True\n\ntest_validateAnthemXmlXl.py:22 in test_verify_outputXML() -> check.is_true(v, msg=\"Not True\")\n\n\u001b[0m\n\n------------------------------------------------------------\n\nFailed Checks: 1\n\n------------------------------------------------------------\n\nself = <test_validateAnthemXmlXl.TestAnthem object at 0x000001F10F027DF0>\n\n\n\n    def test_verify_outputXML(self):\n\n        \"\"\"TC01 Validating Output XML file\"\"\"\n\n        outXMlCheck = outPutxmlCheck('SAM_ARTIFACTS/common_report/duplicate_nodes_common_report.xlsx',\n\n                                     'SAM_ARTIFACTS/transformed_xml/31KT_Plan_Transformed.xml')\n\n    \n\n        result_dict = outXMlCheck.checkValidations()\n\n        flag = False\n\n        failed_list = []\n\n        for k, v in result_dict.items():\n\n            # assert result_dict[k] is True, f\"for column {k}, the value is {result_dict[k]}\"\n\n            check.is_true(v, msg=\"Not True\")\n\n            if not v:\n\n                print(f\"for column {k}, the value is {result_dict[k]}\")\n\n                failed_list.append(k)\n\n                flag = True\n\n        if flag:\n\n            failed_columns = \" \".join(item for item in failed_list)\n\n>           raise AssertionError(f\"\\nfor {failed_columns} columns the values are not as expected\")\n\n\n       AssertionError: \n\n\n       for specialtyCode columns the values are not as expected\n\n\n\ntest_validateAnthemXmlXl.py:29: AssertionError\n\n", "test_name": "test_verify_outputXML", "test_id": "TC01", "test_desc": "Validating Output XML file", "rerun": "0"}, "1": {"status": "FAIL", "message": "FAILURE: \u001b[31mcheck 0 == 41: Not Zero\n\ntest_validateAnthemXmlXl.py:44 in test_verify_commonReport() -> check.equal(0, v, msg=\"Not Zero\")\n\n\u001b[0m\n\n------------------------------------------------------------\n\nFailed Checks: 1\n\n------------------------------------------------------------\n\nself = <test_validateAnthemXmlXl.TestAnthem object at 0x000001F10F027EE0>\n\n\n\n    def test_verify_commonReport(self):\n\n        \"\"\"TC02 Validating Common report data against input XML data\"\"\"\n\n        CommReportCheck = commonReportCheck('SAM_ARTIFACTS/input_xml/31KT_Plan.xml',\n\n                                            'SAM_ARTIFACTS/common_report/duplicate_nodes_common_report.xlsx')\n\n    \n\n        output = CommReportCheck.validateXmlData()\n\n        column_mismatch_dict = output[0]\n\n        output_file = output[1]\n\n        flag = False\n\n        failed_list = []\n\n        for k, v in column_mismatch_dict.items():\n\n            # print(k, v)\n\n            # assert column_mismatch_dict[k] == 0, f\"for column {k}, the mismatch count is {column_mismatch_dict[k]}\"\n\n            check.equal(0, v, msg=\"Not Zero\")\n\n            if column_mismatch_dict[k] != 0:\n\n                print(f\"for column {k}, the mismatch count is {column_mismatch_dict[k]}\")\n\n                flag = True\n\n                failed_list.append(k)\n\n        if flag:\n\n            failed_columns = \" \".join(item for item in failed_list)\n\n>           raise AssertionError(f\"\\nIn Columns {failed_columns} there were mismatches when the Excel report \"\n\n                                 f\"was compared with the XML Data.\\n Please refer to the \"\n\n                                 f\"file located at {output_file} for more details\")\n\n\n       AssertionError: \n\n\n       In Columns SIT_TYPE_VAL there were mismatches when the Excel report was compared with the XML Data.\n\n\n        Please refer to the file located at output_files/xml_vs_xl.xlsx for more details\n\n\n\ntest_validateAnthemXmlXl.py:51: AssertionError\n\n", "test_name": "test_verify_commonReport", "test_id": "TC02", "test_desc": "Validating Common report data against input XML data", "rerun": "0"}, "2": {"status": "FAIL", "message": "self = <test_validateAnthemXmlXl.TestAnthem object at 0x000001F10F027C10>\n\n\n\n    def test_verify_sibing_duplicates(self):\n\n        \"\"\"TC03 Validating the Sibling duplicates in the common report against the input XML data\"\"\"\n\n        obj = duplicateIdentification(\"SAM_ARTIFACTS/common_report/duplicate_nodes_common_report.xlsx\")\n\n    \n\n        output = obj.sibling_duplicate_data_identification()\n\n        duplicates_mismatch_count = output[0]\n\n        cal_sit_count = output[1]\n\n        filename = output[2]\n\n    \n\n>       assert duplicates_mismatch_count == 0, f\"\\n{duplicates_mismatch_count} mismatches have occurred for \" \\\n\n                                               f\"{cal_sit_count} Calculation Situations, \" \\\n\n                                               f\"Please refer file located at {filename} for details \"\n\n\n   AssertionError: \n\n\n     6 mismatches have occurred for 17 Calculation Situations, Please refer file located at output_files/sibling_level_duplicate_identification.xlsx for details \n\n\n   assert 6 == 0\n\n\n\ntest_validateAnthemXmlXl.py:64: AssertionError\n\n", "test_name": "test_verify_sibing_duplicates", "test_id": "TC03", "test_desc": "Validating the Sibling duplicates in the common report against the input XML data", "rerun": "0"}}, "suite_name": "test_validateAnthemXmlXl.py"}}}, "date": "December 08, 2022", "start_time": 1670511933.705599, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "3", "skip": "0", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "3"}