{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 3, "total_error": 0}, "tests": {"0": {"status": "FAIL", "message": "FAILURE: \u001b[31mcheck bool(False): Not True<br>test_validateAnthemXmlXl.py:22 in test_verify_outputXML() -> check.is_true(v, msg=\"Not True\")<br>\u001b[0m<br>------------------------------------------------------------<br>Failed Checks: 1<br>------------------------------------------------------------<br>self = <test_validateAnthemXmlXl.TestAnthem object at 0x0000021BA5DB6E30><br><br>    def test_verify_outputXML(self):<br>        \"\"\"TC01 Validating Output XML file\"\"\"<br>        outXMlCheck = outPutxmlCheck('SAM_ARTIFACTS/common_report/duplicate_nodes_common_report.xlsx',<br>                                     'SAM_ARTIFACTS/transformed_xml/31KT_Plan_Transformed.xml')<br>    <br>        result_dict = outXMlCheck.checkValidations()<br>        flag = False<br>        failed_list = []<br>        for k, v in result_dict.items():<br>            # assert result_dict[k] is True, f\"for column {k}, the value is {result_dict[k]}\"<br>            check.is_true(v, msg=\"Not True\")<br>            if not v:<br>                print(f\"for column {k}, the value is {result_dict[k]}\")<br>                failed_list.append(k)<br>                flag = True<br>        if flag:<br>            failed_columns = \" \".join(item for item in failed_list)<br>>           raise AssertionError(f\"\\nfor {failed_columns} columns the values are not as expected\")<br>\n       AssertionError: <br>\n       for specialtyCode columns the values are not as expected<br><br>test_validateAnthemXmlXl.py:29: AssertionError<br>", "test_name": "test_verify_outputXML", "test_id": "TC01", "test_desc": "Validating Output XML file", "rerun": "0"}, "1": {"status": "FAIL", "message": "FAILURE: \u001b[31mcheck 0 == 41: Not Zero<br>test_validateAnthemXmlXl.py:44 in test_verify_commonReport() -> check.equal(0, v, msg=\"Not Zero\")<br>\u001b[0m<br>------------------------------------------------------------<br>Failed Checks: 1<br>------------------------------------------------------------<br>self = <test_validateAnthemXmlXl.TestAnthem object at 0x0000021BA5DB7190><br><br>    def test_verify_commonReport(self):<br>        \"\"\"TC02 Validating Common report data against input XML data\"\"\"<br>        CommReportCheck = commonReportCheck('SAM_ARTIFACTS/input_xml/31KT_Plan.xml',<br>                                            'SAM_ARTIFACTS/common_report/duplicate_nodes_common_report.xlsx')<br>    <br>        output = CommReportCheck.validateXmlData()<br>        column_mismatch_dict = output[0]<br>        output_file = output[1]<br>        flag = False<br>        failed_list = []<br>        for k, v in column_mismatch_dict.items():<br>            # print(k, v)<br>            # assert column_mismatch_dict[k] == 0, f\"for column {k}, the mismatch count is {column_mismatch_dict[k]}\"<br>            check.equal(0, v, msg=\"Not Zero\")<br>            if column_mismatch_dict[k] != 0:<br>                print(f\"for column {k}, the mismatch count is {column_mismatch_dict[k]}\")<br>                flag = True<br>                failed_list.append(k)<br>        if flag:<br>            failed_columns = \" \".join(item for item in failed_list)<br>>           raise AssertionError(f\"\\nIn Columns {failed_columns} there were mismatches when the Excel report \"<br>                                 f\"was compared with the XML Data.\\n Please refer to the \"<br>                                 f\"file located at {output_file} for more details\")<br>\n       AssertionError: <br>\n       In Columns SIT_TYPE_VAL there were mismatches when the Excel report was compared with the XML Data.<br>\n        Please refer to the file located at output_files/xml_vs_xl.xlsx for more details<br><br>test_validateAnthemXmlXl.py:51: AssertionError<br>", "test_name": "test_verify_commonReport", "test_id": "TC02", "test_desc": "Validating Common report data against input XML data", "rerun": "0"}, "2": {"status": "FAIL", "message": "self = <test_validateAnthemXmlXl.TestAnthem object at 0x0000021BA5E0C040><br><br>    def test_verify_sibing_duplicates(self):<br>        \"\"\"TC03 Validating the Sibling duplicates in the common report against the input XML data\"\"\"<br>        obj = duplicateIdentification(\"SAM_ARTIFACTS/common_report/duplicate_nodes_common_report.xlsx\")<br>    <br>        output = obj.sibling_duplicate_data_identification()<br>        duplicates_mismatch_count = output[0]<br>        cal_sit_count = output[1]<br>        filename = output[2]<br>    <br>>       assert duplicates_mismatch_count == 0, f\"\\n{duplicates_mismatch_count} mismatches have occurred for \" \\<br>                                               f\"{cal_sit_count} Calculation Situations, \" \\<br>                                               f\"Please refer file located at {filename} for details \"<br>\n   AssertionError: <br>\n     6 mismatches have occurred for 17 Calculation Situations, Please refer file located at output_files/sibling_level_duplicate_identification.xlsx for details <br>\n   assert 6 == 0<br><br>test_validateAnthemXmlXl.py:64: AssertionError<br>", "test_name": "test_verify_sibing_duplicates", "test_id": "TC03", "test_desc": "Validating the Sibling duplicates in the common report against the input XML data", "rerun": "0"}}, "suite_name": "test_validateAnthemXmlXl.py"}}}, "date": "December 08, 2022", "start_time": 1670512433.0646162, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "3", "skip": "0", "error": "0", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "3"}